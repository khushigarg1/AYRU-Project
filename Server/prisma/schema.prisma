// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
// prisma/schema.prisma
// npx prisma db push --force-reset
// npx prisma migrate dev --name create-user-authentication-table

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   Int                 @id @default(autoincrement())
  role                 String
  username             String?
  firstName            String?
  lastName             String?
  email                String?             @unique
  pincode              String?
  phoneNumber          String?
  avatar               String?
  orderCount           Int?
  hashedPassword       String?
  address              String?
  country              String?
  state                String?
  city                 String?
  gender               String?
  age                  Int?
  isPhoneVerified      Boolean             @default(false)
  isEmailVerified      Boolean             @default(false)
  carts                Cart[]
  wishlists            Wishlist[]
  orders               Order[]
  shippingAddresses    ShippingAddress[]
  paymentMethods       PaymentMethod[]
  authentication       UserAuthentication? @relation(fields: [userAuthenticationId], references: [id])
  userAuthenticationId Int?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model UserAuthentication {
  id                  Int       @id @default(autoincrement())
  phoneNumber         String?
  emailOtp            String?
  emailExpirationTime DateTime?
  phoneOtp            String?
  phoneExpirationTime DateTime?
  email               String?   @unique
  newEmail            String?
  isPhoneVerified     Boolean   @default(false)
  isEmailVerified     Boolean   @default(false)
  User                User[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Admin {
  id                   Int       @id @default(autoincrement())
  name                 String
  email                String?   @unique
  phoneNumber          String?
  hashedPassword       String
  role                 String    @default("admin")
  isActive             Boolean   @default(true)
  isEmailVerified      Boolean   @default(false)
  emailVerificationOtp String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  lastLoginAt          DateTime?
  failedLoginAttempts  Int       @default(0)
  accountLockedUntil   DateTime?
}

model CustomerSideData {
  id              Int      @id @default(autoincrement())
  marqueeText     String
  extraNote       String?
  additionalText1 String?
  additionalText2 String?
  additionalText3 String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model CustomerSideImage {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Flat {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  size        String
  inventories InventoryFlat[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Fitted {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  FittedDimensions FittedDimensions[]
  inventories      InventoryFitted[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model FittedDimensions {
  id              Int               @id @default(autoincrement())
  fitted          Fitted            @relation(fields: [fittedId], references: [id])
  fittedId        Int
  dimensions      String
  InventoryFitted InventoryFitted[] @relation(name: "InventoryFittedToFittedDimensions")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model CustomFitted {
  id                    Int                     @id @default(autoincrement())
  name                  String
  CustomFittedInventory CustomFittedInventory[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model Media {
  id          Int       @id @default(autoincrement())
  url         String
  type        String
  inventoryId Int
  Inventory   Inventory @relation(fields: [inventoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SizeChartMedia {
  id          Int       @id @default(autoincrement())
  url         String
  inventoryId Int
  Inventory   Inventory @relation(fields: [inventoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Inventory {
  id                    Int                     @id @default(autoincrement())
  productName           String?
  skuId                 String?                 @unique
  quantity              Int?
  soldQuantity          Int?
  minQuantity           Int?
  maxQuantity           Int?
  sellingPrice          Float?
  costPrice             Float?
  discountedPrice       Float?
  discountCount         Int?
  availability          Boolean?
  weight                Float?
  productstatus         ProductStatus?
  status                InventoryStatus?
  style                 String?
  pattern               String?
  fabric                String?
  type                  String?
  size                  String?
  includedItems         Json?
  itemDimensions        String[]
  colorVariation        String?
  extraOptionOutOfStock Boolean?
  specialFeatures       Json?
  threadCount           Int?
  itemWeight            Float?
  origin                String?
  extraNote             String?
  disclaimer            String?
  others                String?
  careInstructions      String[]
  categoryId            Int?
  subCategoryId         Int?
  color                 Color[]
  InventoryFlat         InventoryFlat[]
  InventoryFitted       InventoryFitted[]
  customFittedInventory CustomFittedInventory[]
  Media                 Media[]
  Cart                  Cart[]
  Order                 Order[]
  Wishlist              Wishlist[]
  SizeChartMedia        SizeChartMedia[]
  category              Category?               @relation(fields: [categoryId], references: [id])
  subCategory           SubCategory?            @relation(fields: [subCategoryId], references: [id])
  ProductInventory      ProductInventory[]
  ColorVariations       ColorVariation[]
  relatedInventories    Inventory[]             @relation("InventoryToInventory")
  relatedByInventories  Inventory[]             @relation("InventoryToInventory")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now())
}

model ColorVariation {
  id          Int       @id @default(autoincrement())
  inventoryId Int
  colorId     Int
  Inventory   Inventory @relation(fields: [inventoryId], references: [id])
  Color       Color     @relation(fields: [colorId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model Color {
  id              Int              @id @default(autoincrement())
  name            String
  colorCode       String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  ColorVariations ColorVariation[]
  Inventory       Inventory?       @relation(fields: [inventoryId], references: [id])
  inventoryId     Int?
}

model CustomFittedInventory {
  id             Int          @id @default(autoincrement())
  customFittedId Int
  inventoryId    Int
  Inventory      Inventory    @relation(fields: [inventoryId], references: [id])
  customFitted   CustomFitted @relation(fields: [customFittedId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model InventoryFlat {
  id          Int       @id @default(autoincrement())
  inventoryId Int
  flatId      Int
  Inventory   Inventory @relation(fields: [inventoryId], references: [id])
  Flat        Flat      @relation(fields: [flatId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model InventoryFitted {
  id               Int                @id @default(autoincrement())
  fittedId         Int
  inventoryId      Int
  Inventory        Inventory          @relation(fields: [inventoryId], references: [id])
  Fitted           Fitted             @relation(fields: [fittedId], references: [id])
  fittedDimensions FittedDimensions[] @relation(name: "InventoryFittedToFittedDimensions")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

//extra sizechart 
model Product {
  id               Int                @id @default(autoincrement())
  name             String
  sizes            SizeChart[]
  ProductInventory ProductInventory[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model SizeChart {
  id               Int                @id @default(autoincrement())
  name             String
  width            String
  height           String
  productId        Int
  product          Product            @relation(fields: [productId], references: [id])
  ProductInventory ProductInventory[] @relation(name: "ProductInventoryToSizeChart")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model ProductInventory {
  id            Int         @id @default(autoincrement())
  selectedSizes SizeChart[] @relation(name: "ProductInventoryToSizeChart")
  productId     Int
  product       Product     @relation(fields: [productId], references: [id])
  inventoryId   Int?
  inventory     Inventory?  @relation(fields: [inventoryId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

//extra sizechart 
model Category {
  id            Int           @id @default(autoincrement())
  categoryName  String
  description   String?
  icon          String?
  visible       Boolean?      @default(true)
  subcategories SubCategory[]
  Inventory     Inventory[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model SubCategory {
  id              Int         @id @default(autoincrement())
  subcategoryName String
  categoryId      Int
  description     String?
  icon            String?
  visible         Boolean     @default(true)
  category        Category    @relation(fields: [categoryId], references: [id])
  Inventory       Inventory[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  inventoryId Int?
  inventory   Inventory? @relation(fields: [inventoryId], references: [id])
  quantity    Int        @default(1)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([userId, inventoryId])
}

model Wishlist {
  id          Int        @id @default(autoincrement())
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  inventoryId Int?
  inventory   Inventory? @relation(fields: [inventoryId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([userId, inventoryId])
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id])
  trekkingId Int?
  typeName   String
  dimensions String?
  colorId    Int?
  colorname  String?
  customName String?
  width      Float?
  length     Float?
  height     Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id                Int               @id @default(autoincrement())
  userId            Int
  orderID           Int
  user              User              @relation(fields: [userId], references: [id])
  trekkingId        Int?
  giftOption        Boolean?
  Total             Int
  inventoryId       Int?
  inventory         Inventory?        @relation(fields: [inventoryId], references: [id])
  items             OrderItem[]
  shippingAddresses ShippingAddress[]
  Transaction       Transaction[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model ShippingAddress {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  productId    Int?
  trekkingId   Int?
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  country      String
  postalCode   String
  phoneNumber  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Order        Order?   @relation(fields: [orderId], references: [id])
  orderId      Int?
}

model PaymentMethod {
  id             Int           @id @default(autoincrement())
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  cardNumber     String        @db.VarChar(255)
  cardholderName String
  expiryDate     String
  billingAddress Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Transaction    Transaction[]
}

model Transaction {
  id              Int               @id @default(autoincrement())
  orderId         Int
  order           Order             @relation(fields: [orderId], references: [id])
  paymentMethodId Int
  paymentMethod   PaymentMethod     @relation(fields: [paymentMethodId], references: [id])
  amount          Float
  status          TransactionStatus
  transactionDate DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model ClientLove {
  id        Int      @id @default(autoincrement())
  video     String?
  text      String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InventoryStatus {
  PENDING
  DISPATCHED
  SOLD
}

enum ProductStatus {
  DRAFT
  PUBLISHED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}
