// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
// prisma/schema.prisma
// npx prisma db push --force-reset
// npx prisma migrate dev --name create-user-authentication-table

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    Int                 @id @default(autoincrement())
  role                  String
  username              String?
  firstName             String?
  lastName              String?
  email                 String?             @unique
  pincode               String?
  phoneNumber           String?
  address1              String?
  address2              String?
  alternateMobileNumber String?
  avatar                String?
  orderCount            Int?
  hashedPassword        String?
  country               String?
  state                 String?
  city                  String?
  gender                String?
  age                   Int?
  isPhoneVerified       Boolean             @default(false)
  isEmailVerified       Boolean             @default(false)
  carts                 Cart[]
  wishlists             Wishlist[]
  orders                Order[]
  shippingAddresses     ShippingAddress[]
  paymentMethods        PaymentMethod[]
  authentication        UserAuthentication? @relation(fields: [userAuthenticationId], references: [id])
  userAuthenticationId  Int?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model UserAuthentication {
  id                  Int       @id @default(autoincrement())
  phoneNumber         String?
  emailOtp            String?
  emailExpirationTime DateTime?
  phoneOtp            String?
  phoneExpirationTime DateTime?
  email               String?   @unique
  newEmail            String?
  isPhoneVerified     Boolean   @default(false)
  isEmailVerified     Boolean   @default(false)
  User                User[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Admin {
  id                   Int       @id @default(autoincrement())
  name                 String
  email                String?   @unique
  phoneNumber          String?
  hashedPassword       String
  role                 String    @default("admin")
  isActive             Boolean   @default(true)
  isEmailVerified      Boolean   @default(false)
  emailVerificationOtp String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  lastLoginAt          DateTime?
  failedLoginAttempts  Int       @default(0)
  accountLockedUntil   DateTime?
}

model CustomerSideData {
  id              Int      @id @default(autoincrement())
  marqueeText     String
  extraNote       String?
  additionalText1 String?
  additionalText2 String?
  additionalText3 String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model CustomerSideImage {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Flat {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  size        String
  inventories InventoryFlat[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Fitted {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  // FittedDimensions FittedDimensions[]
  inventories InventoryFitted[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

// model FittedDimensions {
//   id         Int      @id @default(autoincrement())
//   // fitted     Fitted   @relation(fields: [fittedId], references: [id])
//   fittedId   Int
//   dimensions String
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   // InventoryFitted InventoryFitted[]
// }

// model CustomFitted {
//   id        Int      @id @default(autoincrement())
//   name      String
//   //CustomFittedInventory CustomFittedInventory[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Media {
  id          Int       @id @default(autoincrement())
  url         String
  type        String
  inventoryId Int
  Inventory   Inventory @relation(fields: [inventoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SizeChartMedia {
  id          Int       @id @default(autoincrement())
  url         String
  inventoryId Int
  Inventory   Inventory @relation(fields: [inventoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Inventory {
  id                    Int                     @id @default(autoincrement())
  productName           String?
  skuId                 String?                 @unique
  quantity              Int?
  soldQuantity          Int?
  minQuantity           Int?
  maxQuantity           Int?
  sellingPrice          Float?
  costPrice             Float?
  discountedPrice       Float?
  availability          Boolean?
  weight                Float?
  productstatus         ProductStatus?
  status                InventoryStatus?
  style                 String?
  pattern               String?
  fabric                String?
  type                  String?
  size                  String?
  includedItems         String[]
  itemDimensions        String[]
  colorVariation        String?
  extraOptionOutOfStock Boolean?
  sale                  Boolean?
  specialFeatures       String[]
  threadCount           String?
  categoryid            Int?
  itemWeight            Float?
  origin                String?
  extraNote             String?
  disclaimer            String?
  description           String?
  others                String?
  others1               String?
  careInstructions      String[]
  color                 Color[]
  InventoryFlat         InventoryFlat[]
  InventoryFitted       InventoryFitted[]
  InventorySubcategory  InventorySubcategory[]
  customFittedInventory CustomFittedInventory[]
  Media                 Media[]
  Cart                  Cart[]
  Order                 Order[]
  Wishlist              Wishlist[]
  SizeChartMedia        SizeChartMedia[]
  ProductInventory      ProductInventory[]
  ColorVariations       ColorVariation[]
  relatedInventories    Inventory[]             @relation("InventoryToInventory")
  relatedByInventories  Inventory[]             @relation("InventoryToInventory")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now())
  Category              Category?               @relation(fields: [categoryId], references: [id])
  categoryId            Int?
  OrderItem             OrderItem[]
}

model ColorVariation {
  id          Int       @id @default(autoincrement())
  inventoryId Int
  colorId     Int
  Inventory   Inventory @relation(fields: [inventoryId], references: [id])
  Color       Color     @relation(fields: [colorId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model Color {
  id              Int              @id @default(autoincrement())
  name            String
  colorCode       String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  ColorVariations ColorVariation[]
  Inventory       Inventory?       @relation(fields: [inventoryId], references: [id])
  inventoryId     Int?
}

model InventorySubcategory {
  id            Int         @id @default(autoincrement())
  subcategoryid Int
  inventoryId   Int
  Inventory     Inventory   @relation(fields: [inventoryId], references: [id])
  SubCategory   SubCategory @relation(fields: [subcategoryid], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model CustomFittedInventory {
  id              Int            @id @default(autoincrement())
  inventoryId     Int
  sellingPrice    Float?
  costPrice       Float?
  discountedPrice Float?
  Inventory       Inventory      @relation(fields: [inventoryId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  inventoryFlatId Int?
  InventoryFlat   InventoryFlat? @relation(fields: [inventoryFlatId], references: [id])
}

model InventoryFlat {
  id                    Int                     @id @default(autoincrement())
  inventoryId           Int
  flatId                Int
  quantity              Int?
  soldQuantity          Int?
  minQuantity           Int?
  maxQuantity           Int?
  sellingPrice          Float?
  costPrice             Float?
  CustomFittedInventory CustomFittedInventory[]
  discountedPrice       Float?
  Inventory             Inventory               @relation(fields: [inventoryId], references: [id])
  Flat                  Flat                    @relation(fields: [flatId], references: [id])
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model InventoryFitted {
  id              Int       @id @default(autoincrement())
  fittedId        Int
  inventoryId     Int
  quantity        Int?
  soldQuantity    Int?
  minQuantity     Int?
  maxQuantity     Int?
  sellingPrice    Float?
  costPrice       Float?
  discountedPrice Float?
  // dimensionid     Int?
  Inventory       Inventory @relation(fields: [inventoryId], references: [id])
  Fitted          Fitted    @relation(fields: [fittedId], references: [id])
  // FittedDimension FittedDimensions? @relation(fields: [dimensionid], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

//extra sizechart 
model Product {
  id               Int                @id @default(autoincrement())
  name             String
  sizes            SizeChart[]
  ProductInventory ProductInventory[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model SizeChart {
  id               Int                @id @default(autoincrement())
  name             String
  width            String
  height           String
  productId        Int
  product          Product            @relation(fields: [productId], references: [id])
  ProductInventory ProductInventory[] @relation(name: "ProductInventoryToSizeChart")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model ProductInventory {
  id            Int         @id @default(autoincrement())
  selectedSizes SizeChart[] @relation(name: "ProductInventoryToSizeChart")
  productId     Int
  product       Product     @relation(fields: [productId], references: [id])
  inventoryId   Int?
  inventory     Inventory?  @relation(fields: [inventoryId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

//extra sizechart 
model Category {
  id            Int           @id @default(autoincrement())
  categoryName  String
  description   String?
  icon          String?
  visible       Boolean?      @default(true)
  subcategories SubCategory[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Inventory     Inventory[]
}

model SubCategory {
  id                   Int                    @id @default(autoincrement())
  subcategoryName      String
  categoryId           Int
  description          String?
  icon                 String?
  visible              Boolean                @default(true)
  category             Category               @relation(fields: [categoryId], references: [id])
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  InventorySubcategory InventorySubcategory[]
}

model Cart {
  id                       Int       @id @default(autoincrement())
  userId                   Int
  inventoryId              Int
  quantity                 Int
  flatId                   Int?
  customId                 Int?
  fittedId                 Int?
  sellingPrice             Float?
  costPrice                Float?
  discountedPrice          Float?
  sizeOption               String?
  selectedFlatItem         String?
  selectedFittedItem       String?
  selectedCustomFittedItem String?
  unit                     String?
  length                   Float?
  width                    Float?
  height                   Float?
  remark                   String?
  Inventory                Inventory @relation(fields: [inventoryId], references: [id])
  User                     User      @relation(fields: [userId], references: [id])
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
}

model Wishlist {
  id          Int       @id @default(autoincrement())
  userId      Int
  inventoryId Int
  Inventory   Inventory @relation(fields: [inventoryId], references: [id])
  User        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, inventoryId])
}

model Order {
  id                Int             @id @default(autoincrement())
  orderid           String          @unique
  userId            Int
  status            String
  imageurl          String?
  trekkingId1       String?
  trekkingId2       String?
  trekkinglink      String?
  couriername       String?
  paymentStatus     String
  deliveryStatus    String
  giftOption        Boolean?
  Total             Int
  paymentMethodId   Int?
  deliveryAddressId Int
  remark            String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  user              User            @relation(fields: [userId], references: [id])
  paymentMethod     PaymentMethod?  @relation(fields: [paymentMethodId], references: [id])
  shippingAddress   ShippingAddress @relation(fields: [deliveryAddressId], references: [id])
  orderItems        OrderItem[]
  Inventory         Inventory?      @relation(fields: [inventoryId], references: [id])
  inventoryId       Int?
}

model OrderItem {
  id                       Int       @id @default(autoincrement())
  orderId                  Int
  inventoryId              Int
  cartId                   Int?
  quantity                 Int
  discountedPrice          Float?
  sellingPrice             Float?
  costPrice                Float?
  sizeOption               String?
  selectedFlatItem         String?
  selectedFittedItem       String?
  selectedCustomFittedItem String?
  unit                     String?
  length                   Float?
  width                    Float?
  height                   Float?
  order                    Order     @relation(fields: [orderId], references: [id])
  inventory                Inventory @relation(fields: [inventoryId], references: [id])
}

model ShippingAddress {
  id                    Int      @id @default(autoincrement())
  userId                Int
  userName              String?
  addressLine1          String
  addressLine2          String?
  pincode               String
  city                  String
  state                 String
  country               String
  phoneNumber           String
  alternateMobileNumber String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id])
  orders                Order[]
}

model PaymentMethod {
  id            Int           @id @default(autoincrement())
  userId        Int
  type          String
  provider      String
  accountNumber String
  expiryDate    DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  transactions  Transaction[]
  orders        Order[]
}

model Transaction {
  id                Int      @id @default(autoincrement())
  paymentMethodId   Int
  razorpayOrderId   String
  razorpayPaymentId String
  status            String
  amount            Float
  currency          String
  method            String
  bank              String?
  transactionDate   DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])
}

model ClientLove {
  id        Int      @id @default(autoincrement())
  video     String?
  text      String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InventoryStatus {
  PENDING
  DISPATCHED
  SOLD
}

enum ProductStatus {
  DRAFT
  PUBLISHED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}
